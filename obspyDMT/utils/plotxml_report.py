#!/usr/bin/env python
# -*- coding: utf-8 -*-

# -------------------------------------------------------------------
#   Filename:  plotxml_report.py
#   Purpose:   Plot the report generated by plotxml flag
#   Author:    Kasra Hosseini
#   Email:     hosseini@geophysik.uni-muenchen.de
#   License:   GPLv3
# -------------------------------------------------------------------

# -----------------------------------------------------------------------
# ----------------Import required Modules (Python and Obspy)-------------
# -----------------------------------------------------------------------

# Required Python and Obspy modules will be imported in this part.
import matplotlib.pyplot as plt
from mpl_toolkits.basemap import Basemap
import numpy as np
import sys

add_report = sys.argv[1]
report_fio = open(add_report, 'r')
report_fi = report_fio.readlines()

# --------------------------------------------------------------------
# collect information of good stations:
sta_lat_g = []
sta_lon_g = []
per_phase_diff_g = []
max_diff_g = []

# collect information of bad stations:
sta_lat_b = []
sta_lon_b = []
per_phase_diff_b = []
max_diff_b = []
id_b = []
for i in range(1, len(report_fi)):
    line_report_fi = report_fi[i].split()
    if float(line_report_fi[1]) > 0.:
        sta_lat_b.append(float(line_report_fi[3]))
        sta_lon_b.append(float(line_report_fi[4]))
        per_phase_diff_b.append(float(line_report_fi[1]))
        max_diff_b.append(float(line_report_fi[2]))
        id_b.append(line_report_fi[0])
        print report_fi[i].split('\n')[0]
    else:
        sta_lat_g.append(float(line_report_fi[3]))
        sta_lon_g.append(float(line_report_fi[4]))
        per_phase_diff_g.append(float(line_report_fi[1]))
        max_diff_g.append(float(line_report_fi[2]))

if len(sta_lat_g) > 0:
    # Plot GOOD stations
    plt.figure()
    m = Basemap(projection='robin', lon_0=0, lat_0=0)
    m.fillcontinents()
    parallels = np.arange(-90, 90, 30.)
    m.drawparallels(parallels, labels=[1, 1, 1, 1], fontsize=18)
    meridians = np.arange(-180., 180., 60.)
    m.drawmeridians(meridians, labels=[1, 1, 1, 1], fontsize=18)
    m.drawmapboundary()

    x, y = m(sta_lon_g, sta_lat_g)
    m.scatter(x, y, 20, c=per_phase_diff_g, marker="o", edgecolor='none',
              zorder=10, cmap='gray', vmin=0., vmax=1.)
    cbar = plt.colorbar(orientation='horizontal', shrink=0.9)
    cbar.ax.tick_params(labelsize=18)
    plt.savefig('compare_plots_good.png')

if len(sta_lat_b) > 0:
    # Plot BAD stations
    plt.figure()
    m = Basemap(projection='robin', lon_0=0, lat_0=0)
    m.fillcontinents()
    parallels = np.arange(-90, 90, 30.)
    m.drawparallels(parallels, labels=[1, 1, 1, 1], fontsize=18)
    meridians = np.arange(-180., 180., 60.)
    m.drawmeridians(meridians, labels=[1, 1, 1, 1], fontsize=18)
    m.drawmapboundary()

    x, y = m(sta_lon_b, sta_lat_b)
    m.scatter(x, y, 100, c=per_phase_diff_b, marker="o", edgecolor='none',
              zorder=10, cmap='jet',
              vmin=min(per_phase_diff_b), vmax=max(per_phase_diff_b))
    cbar = plt.colorbar(orientation='horizontal', shrink=0.9)
    cbar.ax.tick_params(labelsize=18)
    plt.savefig('compare_plots_bad.png')

    plt.figure()
    plt.hist(per_phase_diff_b, bins=1000)
    plt.xlabel('%Difference', size=24, weight='bold')
    plt.ylabel('#channels', size=24, weight='bold')
    plt.xticks(size=18, weight='bold')
    plt.yticks(size=18, weight='bold')

    plt.figure()
    plt.hist(max_diff_b, bins=1000)
    plt.xlabel('abs(maximum difference)', size=24, weight='bold')
    plt.ylabel('#channels', size=24, weight='bold')
    plt.xticks(size=18, weight='bold')
    plt.yticks(size=18, weight='bold')

plt.show()


